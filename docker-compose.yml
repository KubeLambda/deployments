---
services:
  nats:
    image: nats:latest
    command: --js --sd /data -p 4222 -m 8222  #--debug --trace
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222
    # volumes:
    #   - ./jetstream-cluster/n1:/data
    healthcheck:
      test: echo $$(wget --server-response http://localhost:8222/varz 2>&1 | grep  '200 OK') | grep '200'  || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
  dashboard:
    image: ghcr.io/nats-nui/nui:latest
    ports:
      - target: 31311
        published: 8082
        protocol: tcp
    depends_on:
      nats:
        condition: service_started
  # can't connect to jetsream
  # dashboard:
  #   image: sphqxe/nats-webui:latest
  #   ports:
  #     - target: 80
  #       published: 8082
  #       protocol: tcp
  #   depends_on:
  #     nats:
  #       condition: service_started
  # no way to browse subjects and messages
  # dashboard:
  #   image: mdawar/nats-dashboard
  #   ports:
  #     - target: 80
  #       published: 8082
  #       protocol: tcp
  #   configs:
  #     - source: dashboard-config.json
  #       target: /srv/config.json
  #   depends_on:
  #     nats:
  #       condition: service_started
  webhook-adapter:
    build:
      context: ../kl-webhook-adapter
      dockerfile: Dockerfile
    # container_name: webhook-adapter
    depends_on:
      nats:
        condition: service_started
    command: >
      sh -c "/app/webhook-adapter run --deployment=production"
    ports:
      - target: 3001
        published: 3001
        protocol: tcp
    environment:
    #   - WEBHOOK_ADAPTER_CREDENTIALS_KEY=
    #   - WEBHOOK_ADAPTER_CREDENTIALS_SECRET=
    #   - WEBHOOK_ADAPTER_SERVER_ADDR=0.0.0.0
      # - WEBHOOK_ADAPTER_SERVER_PORT=3001
      - WEBHOOK_ADAPTER_BROKER_ADDR=nats
      # - WEBHOOK_ADAPTER_BROKER_PORT=9876
  # example-lambda:
  #   build:
  #     context: ./example_lambda/example_lambda/
  #     dockerfile: Dockerfile
  #   container_name: example_lambda
  #   environment:
  #     PYFUNC_LOG_LEVEL: debug
  #   depends_on:
  #     nats:
  #       condition: service_started
